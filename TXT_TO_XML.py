import csv; import re
import argparse
import get_iv_cv_dicts as dicts
import os
import pandas as pd
import logging

parser=argparse.ArgumentParser(description='Covert test results to xml schemas')
parser.add_argument('--f', type=str, help='the .txt filname', required=False)
parser.add_argument('--t', type=str, help='the XML: Tablename you wish to priduce. Available options are: [HGC_CERN_SENSOR_IV,HGC_CERN_SENSOR_IV_SUMRY]', required=False)
parser.add_argument('--setup', type=bool, help='boolean to say whether you have done source ./setup.sh', required=False)

parser.add_argument('--user', type=str, help='The name of the user who did this test. Default is Alex.', required=False, default='Alex')
parser.add_argument('--location', type=str, help='The locatino where this test was carried. Default is "FSU"', required=False, default='FSU')
parser.add_argument('--comment', type=str, help='Any comments on this test. Default is the comment from the .txt file', required=False,default = True)

args = parser.parse_args()


################################################## CONFIGURATIONS ########################################################

filename = args.f
XML_tablename=args.t
SETUP = args.setup

PRESERIES=True

#YOU HAVE TO DO 
#source ./setup.sh
#in the base directory, which sets up these environment variables. 
#if you don't want to set it up (just for testing) do --steup False at the end of running this file



try:
    FSUDB_OUTPUT_DIR=os.environ['FSUDB_OUTPUT_DIR']
    
    #SUMMARY DIRECTORIES (GENERATED BY https://gitlab.cern.ch/CLICdp/HGCAL/lcd_hgcal_analysisworkflows)
    PRESERIES_IV_SUMMARY_DIR = os.environ['PRESERIES_IV_SUMMARY_DIR']
    OLD_PRESERIES_IV_SUMMARY_DIR = os.environ['OLD_PRESERIES_IV_SUMMARY_DIR']

    PRESERIES_CV_SUMMARY_DIR = os.environ['PRESERIES_CV_SUMMARY_DIR']
    OLD_PRESERIES_CV_SUMMARY_DIR = os.environ['OLD_PRESERIES_CV_SUMMARY_DIR']

    #HGSENSOR DIRECTORIES (GENERATED BY https://gitlab.cern.ch/CLICdp/HGCAL/lcd_hgcal_analysisworkflows)
    PRESERIES_IV_HGSENSOR_DIR = os.environ['PRESERIES_IV_HGSENSOR_DIR']
    OLD_PRESERIES_IV_HGSENSOR_DIR = os.environ['OLD_PRESERIES_IV_HGSENSOR_DIR']

    PRESERIES_CV_HGSENSOR_DIR = os.environ['PRESERIES_CV_HGSENSOR_DIR']
    OLD_PRESERIES_CV_HGSENSOR_DIR = os.environ['OLD_PRESERIES_CV_HGSENSOR_DIR']
    # if "SUMRY" in args.t:
        # FSUDB_OUTPUT_DIR=FSUDB_OUTPUT_DIR+'SUMMARY_TABLES/'
        
    print('All environment variables properly set!\n Files will be saved to %s' % FSUDB_OUTPUT_DIR)

except KeyError:
    #raise KeyError(key) from None
    print("you haven't set up any environemnt variables for your resutls! Set the environment variables in setup.sh and do source ./setup.sh") 
    pass

try:
    os.system('mkdir -p %s' % FSUDB_OUTPUT_DIR)
except Exception:
    pass
    


################### SET UP LOGGING ###########
logger=logging.getLogger(__name__)
logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(message)s)')
file_handler = logging.FileHandler('%sgenerate_summaries.log' % FSUDB_OUTPUT_DIR )
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)



def GET_SUMMARY_FULL_DIRS():
    #### GET FULL PATHS OF LCD SUMMARY DIRS
    if PRESERIES:
        IV_SUMMARY_FULL_DIRS=[]
        for dir in os.listdir(PRESERIES_IV_SUMMARY_DIR):
            IV_SUMMARY_FULL_DIRS.append(os.path.join(PRESERIES_IV_SUMMARY_DIR, dir))
        for dir in os.listdir(OLD_PRESERIES_IV_SUMMARY_DIR):
            IV_SUMMARY_FULL_DIRS.append(os.path.join(OLD_PRESERIES_IV_SUMMARY_DIR, dir))       
        
        CV_SUMMARY_FULL_DIRS=[]
        for dir in os.listdir(PRESERIES_CV_SUMMARY_DIR):
            CV_SUMMARY_FULL_DIRS.append(os.path.join(PRESERIES_CV_SUMMARY_DIR, dir))
        for dir in os.listdir(OLD_PRESERIES_CV_SUMMARY_DIR):
            CV_SUMMARY_FULL_DIRS.append(os.path.join(OLD_PRESERIES_CV_SUMMARY_DIR, dir))
    if 'IV' in args.t:
        print('IV_SUMMARY_FULL_DIRS= ', IV_SUMMARY_FULL_DIRS)
    if 'CV' in args.t:
        print('CV_SUMMARY_FULL_DIRS= ', CV_SUMMARY_FULL_DIRS)

    return IV_SUMMARY_FULL_DIRS, CV_SUMMARY_FULL_DIRS 
    

def GET_HG_SENSOR_FULL_DIRS():
        #### GET FULL PATHS OF LCD HGSENSOR DIRS
    if PRESERIES:
        IV_HGSENSOR_FULL_DIRS=[]
        for dir in os.listdir(PRESERIES_IV_HGSENSOR_DIR):
            IV_HGSENSOR_FULL_DIRS.append(os.path.join(PRESERIES_IV_HGSENSOR_DIR, dir))
        for dir in os.listdir(OLD_PRESERIES_IV_HGSENSOR_DIR):
            IV_HGSENSOR_FULL_DIRS.append(os.path.join(OLD_PRESERIES_IV_HGSENSOR_DIR, dir))       
        
        CV_HGSENSOR_FULL_DIRS=[]
        for dir in os.listdir(PRESERIES_CV_HGSENSOR_DIR):
            CV_HGSENSOR_FULL_DIRS.append(os.path.join(PRESERIES_CV_HGSENSOR_DIR, dir))
        for dir in os.listdir(OLD_PRESERIES_CV_HGSENSOR_DIR):
            CV_HGSENSOR_FULL_DIRS.append(os.path.join(OLD_PRESERIES_CV_HGSENSOR_DIR, dir))

    if 'IV' in args.t:  
        print('IV_HGSENSOR_FULL_DIRS= ', IV_HGSENSOR_FULL_DIRS)
    if 'CV' in args.t:  
        print('CV_HGSENSOR_FULL_DIRS= ', CV_HGSENSOR_FULL_DIRS)
    
    return IV_HGSENSOR_FULL_DIRS, CV_HGSENSOR_FULL_DIRS




################################################### GET STUFF YOU NEED FROM SUMMARY DIRECTORIES (GENERATED BY https://gitlab.cern.ch/CLICdp/HGCAL/lcd_hgcal_analysisworkflows) #########################################################

def get_kind_of_part(scratchpad_ID, IV_or_CV):
    scratchpad_ID=scratchpad_ID.split('_')[0]
    IV_SUMMARY_FULL_DIRS, CV_SUMMARY_FULL_DIRS=GET_SUMMARY_FULL_DIRS()
    #search the summary directories for this scratcpadid then find the tex file
    if IV_or_CV=="IV":
        for fullpath in IV_SUMMARY_FULL_DIRS:
            if scratchpad_ID in fullpath:
                scratchpad_ID_fullpath=fullpath
                print('\n scratchpadID path=', scratchpad_ID_fullpath)
                for file in os.listdir(scratchpad_ID_fullpath):
                    if file.endswith('.tex') and "elog" not in file:
                        summary_tex_file_path=os.path.join(scratchpad_ID_fullpath, file)
                        print('\n SUMMARY TEX FILE', summary_tex_file_path)
                        f_tex=open(summary_tex_file_path,'r')
                        for line in f_tex:
                            if "item active thickness:" in line:
                                print('thickness=', line.split()[3])
                                thickness= int(line.split()[3])
                        f_tex.close()

    if IV_or_CV=="CV":
        for fullpath in CV_SUMMARY_FULL_DIRS:
            if scratchpad_ID in fullpath:
                scratchpad_ID_fullpath=fullpath
                print('\n scratchpadID path=', scratchpad_ID_fullpath)
                for file in os.listdir(scratchpad_ID_fullpath):
                    if file.endswith('.tex') and "elog" not in file:
                        summary_tex_file_path=os.path.join(scratchpad_ID_fullpath, file)
                        print('\n SUMMARY TEX FILE', summary_tex_file_path)
                        f_tex=open(summary_tex_file_path,'r')
                        for line in f_tex:
                            if "item active thickness:" in line:
                                print('thickness=', line.split()[3])
                                thickness= int(line.split()[3])
                        f_tex.close()

    if thickness==120:
        HDorLD='HD'
    elif thickness==200:
        HDorLD='LD'
    elif thickness==300:
        HDorLD='LD'
    else:
        logger.debug('couldnt find the thickness for sensor with %d scratchpad_ID (serial number)' % scratchpad_ID)
    kind_of_part= str(thickness)+ 'um Si Sensor ' +  HDorLD + ' Full'
    print('kind of part = ', kind_of_part)
    return kind_of_part

###################################################
def GET_GRADING_CRITERIA_IV(scratchpad_ID):
    scratchpad_ID=scratchpad_ID.split('_')[0]
    IV_SUMMARY_FULL_DIRS, CV_SUMMARY_FULL_DIRS=GET_SUMMARY_FULL_DIRS()
    #search the summary directories for this scratcpadid then find the tex file
    #BAD BADS ARE STORED IN EG "/home/output/hgsensor_iv/grading/N3313_9_DF/bad_pads.txt"
    for fullpath in IV_SUMMARY_FULL_DIRS:
        if scratchpad_ID in fullpath:
            scratchpad_ID_fullpath=fullpath
            logger.debug('\n scratchpadID path=', scratchpad_ID_fullpath)
            for file in os.listdir(scratchpad_ID_fullpath):
                if file.endswith('.tex') and "elog" not in file:
                    summary_tex_file_path=os.path.join(scratchpad_ID_fullpath, file)
                    logger.debug('\n SUMMARY TEX FILE IV', summary_tex_file_path)
                    f_tex=open(summary_tex_file_path,'r')
                    for line in f_tex:
                        if "item Number of bad pads" in line:
                            logger.debug(line.split())
                            if "Passed" in line:
                                NUM_BAD_CELLS_PASS = "PASSED"
                            else:
                                NUM_BAD_CELLS_PASS = "FAILED"
                            logger.debug("NUM_BAD_CELLS_PASS=", NUM_BAD_CELLS_PASS)

                        if "item Current at 600V I600 (normalised to 20 deg Celsius): <= 100 $\mu$A integrated over the sensor and guard rings" in line:
                            logger.debug(line.split())
                            if "Passed" in line:
                                CURNT_600V_LT_100UA = "PASSED"
                            else:
                                CURNT_600V_LT_100UA = "FAILED"
                            logger.debug('CURNT_600V_LT_100UA=', CURNT_600V_LT_100UA)

                        if "item I800 < 2.5 x I600:" in line:
                            logger.debug(line.split())
                            if "Passed" in line:
                                CRNTRATIO_800_TO_600V = "PASSED"
                            else:
                                CRNTRATIO_800_TO_600V="FAILED"
                            logger.debug("CRNTRATIO_800_TO_600V", CRNTRATIO_800_TO_600V)

                        if "item Allowed number of adjacent bad pads <= 2:" in line:
                            logger.debug(line.split())
                            if "Passed" in line:
                                NUM_BAD_ADJ_CELLS_PASS = "PASSED"
                            else:
                                NUM_BAD_ADJ_CELLS_PASS = "FAIL"
                            logger.debug("NUM_BAD_ADJ_CELLS_PASS", NUM_BAD_ADJ_CELLS_PASS)
                        if "the requirements" in line:
                            if "PASSED" in line:
                                PASS = 'Y'
                            else:
                                PASS='N'
                            logger.debug("PASS", PASS)
                    f_tex.close()

    return NUM_BAD_CELLS_PASS, CURNT_600V_LT_100UA, CRNTRATIO_800_TO_600V, NUM_BAD_ADJ_CELLS_PASS, PASS






################################################### GET STUFF YOU NEED FROM HGSENSOR DIRECTORIES (GENERATED BY https://gitlab.cern.ch/CLICdp/HGCAL/lcd_hgcal_analysisworkflows) #########################################################

def get_number_bad_cells(scratchpad_ID, IV_or_CV):
    IV_HGSENSOR_FULL_DIRS, CV_HGSENSOR_FULL_DIRS=GET_HG_SENSOR_FULL_DIRS()
    scratchpad_ID=scratchpad_ID.split('_')[0]
    #search the HGSENSOR directories for this scratcpadid then find the tex file
    if IV_or_CV=="IV":
        for fullpath in IV_HGSENSOR_FULL_DIRS:
            if scratchpad_ID in fullpath:
                scratchpad_ID_fullpath=fullpath
                print('\n scratchpadID rading path=', scratchpad_ID_fullpath)
                for file in os.listdir(scratchpad_ID_fullpath):
                    if file == 'bad_pads.txt':
                        hgsensor_tex_file_path=os.path.join(scratchpad_ID_fullpath, file)
                        print('\n HGSENSOR TEX FILE', hgsensor_tex_file_path)
                        logger.debug('\n HGSENSOR TEX FILE', hgsensor_tex_file_path)
                        f_tex=open(hgsensor_tex_file_path,'r')
                        list_bad_cells=f_tex.readlines()
                        num_bad_pads = len(list_bad_cells)

                        print('NUMBER OF BAD PADS=',num_bad_pads)

                        f_tex.close()

    if IV_or_CV=="CV":
        for fullpath in CV_HGSENSOR_FULL_DIRS:
            if scratchpad_ID in fullpath:
                scratchpad_ID_fullpath=fullpath
                print('\n scratchpadID grading path=', scratchpad_ID_fullpath)
                for file in os.listdir(scratchpad_ID_fullpath):
                    if file == 'bad_pads.txt':
                        hgsensor_tex_file_path=os.path.join(scratchpad_ID_fullpath, file)
                        print('\n HGSENSOR TEX FILE', hgsensor_tex_file_path)
                        f_tex=open(hgsensor_tex_file_path,'r')
                        if len(f_tex.readlines()):
                            list_bad_cells=f_tex.readlines()
                            num_bad_pads = len(list_bad_cells)
                        else:
                            num_bad_pads=0
                            list_bad_cells='NULL'
                        print('NUMBER OF BAD PADS=',num_bad_pads)
                        f_tex.close()
    return num_bad_pads, list_bad_cells


####################################################################################################

def convert_timestamp(orig_format):                                                                                                                                              
    '''
    orig_format example = 15.8.2022 12:39                                                                                                                                           
    desired_format example=2012-09-19 14:04:00 '''                                                                                                                                       
    #print('original time', orig_format)                                                                                                                                         
    date, time = orig_format.split()                                                                                                                                             
    day, month, year = date.split('.')                                                                                                                                           
    month='0'+month if len(month)==1 else month                                                                                                                                  
    hour, minutes = time.split(':')                                                                                                                                              
    desired_format = year+'-'+month+'-'+day+' '+ hour+':'+minutes+':00' #an f string would have been so much nicer! (but lcd uses python 2)                                                                                                                
    #print(desired_format)                                                                                                                                                       
    return desired_format 

def get_TOT_CURRENT_600_800V(DICT):
    """ DICT could be IVDICT or CVDICT
    To use: TOT_CURRENT_600, TOT_CURRENT_800 = get_TOT_CURRENT_600_800V(IVDICT)
    """
    DF = pd.DataFrame.from_dict(DICT)
    mask_600 = DF['V_list']==str(-600.0)
    TOT_CURRENT_600 = DF[mask_600]['Tot_Current_list'].values
    TOT_CURRENT_600_first = TOT_CURRENT_600[0]
    print('total current for first cell reaching 600 V', TOT_CURRENT_600_first)

    mask_800 = DF['V_list']==str(-800.0)
    TOT_CURRENT_800 = DF[mask_800]['Tot_Current_list'].values
    TOT_CURRENT_800_first=TOT_CURRENT_800[0]
    print('total current for first cell reaching 800 V', TOT_CURRENT_800_first)
    return TOT_CURRENT_600_first, TOT_CURRENT_800_first

####################################################################################################





##################### #####################  IV TABLES #####################  ##################### 

def make_xml_schema_HGC_CERN_SENSOR_IV(filename):
    
    IVDICT = dicts.get_iv_dict(filename)
    XML_tablename = 'HGC_CERN_SENSOR_IV'

    Name = 'HGC Sensor Manufacturer IV'
    Sensor_Type = IVDICT['Sensor_type']
    Run_Name = IVDICT['Identifier'].split('_')[0]
    location=args.location
    # Kind_of_part = '200um Si Sensor SD Full'

    serial_number =IVDICT['Scratchpad_ID'] #+Run_Name#REMEMBER, SERIAL NUMBER IS SCRATCHPAD ID
    if PRESERIES:
        serial_number = serial_number +'_0'

    Kind_of_part = get_kind_of_part(serial_number, "IV")

    xml_table_file = FSUDB_OUTPUT_DIR + Run_Name + '_'+ XML_tablename + '_PRESERIES_TEST.xml'

    with open(xml_table_file, 'w+') as xmlf:
        xmlf.write('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n')
        xmlf.write('<ROOT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n')
        xmlf.write('<HEADER>\n')
        xmlf.write('\t<TYPE>\n')
        xmlf.write('\t\t<EXTENSION_TABLE_NAME>HGC_CERN_SENSOR_IV</EXTENSION_TABLE_NAME>\n')
        xmlf.write('\t\t<NAME>HGC CERN Sensor IV</NAME>\n')
        xmlf.write('\t</TYPE>\n')
        xmlf.write('\t\t<RUN>\n')
        xmlf.write('\t\t\t<RUN_NAME>' + Run_Name + '</RUN_NAME>\n')
        xmlf.write('\t\t\t<RUN_BEGIN_TIMESTAMP>'+convert_timestamp(IVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_BEGIN_TIMESTAMP>\n')
        xmlf.write('\t\t\t<RUN_END_TIMESTAMP>'+convert_timestamp(IVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_END_TIMESTAMP>\n')
        xmlf.write('\t\t\t<INITIATED_BY_USER>'+args.user.rstrip()+'</INITIATED_BY_USER>\n')
        xmlf.write('\t\t\t<LOCATION>'+location.rstrip()+'</LOCATION>\n')
        #FIGURE OUT WHY COMMENTS are reverting to booleans
        # if args.comment:
        #     xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+args.comment.replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        # else:
        #     xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+str(IVDICT['Comments']).replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+str(IVDICT['Comments']).replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        xmlf.write('\t\t</RUN>\n')
        xmlf.write(' </HEADER>\n')

        xmlf.write('\t\t<DATA_SET>\n')
        xmlf.write('\t\t\t<PART>\n')
        xmlf.write('\t\t\t\t<KIND_OF_PART>'+Kind_of_part.rstrip()+'</KIND_OF_PART>\n')
        xmlf.write('\t\t\t\t<SERIAL_NUMBER>'+serial_number.rstrip()+'</SERIAL_NUMBER>\n')
        xmlf.write('\t\t\t</PART>\n')


        for i in range(len(IVDICT['V_list'])):
            xmlf.write('\t\t\t<DATA>\n')
            xmlf.write('\t\t\t\t<VOLTS>'+str(IVDICT['V_list'][i]).rstrip()+'</VOLTS>\n')
            #BELLOW IS CHANNEL CURRENT
            xmlf.write('\t\t\t\t<CURNT_NANOAMP>'+str(IVDICT['Channel_Current_list'][i]).rstrip()+'</CURNT_NANOAMP>\n')
            #BLLOW IS CHANNEL ERROR CURRENT
            xmlf.write('\t\t\t\t<ERR_CURNT_NANOAMP>'+str(IVDICT['Error_Current_list'][i]).rstrip()+'</ERR_CURNT_NANOAMP>\n')
            #BELLOW IS TOT CURRENT 
            xmlf.write('\t\t\t\t<TOT_CURNT_NANOAMP>'+str(IVDICT['Tot_Current_list'][i]).rstrip()+'</TOT_CURNT_NANOAMP>\n')
            xmlf.write('\t\t\t\t<ACTUAL_VOLTS>'+str(IVDICT['Act_Volts_list'][i]).rstrip()+'</ACTUAL_VOLTS>\n')
            xmlf.write('\t\t\t\t<TIME_SECS>'+str(IVDICT['Time_list'][i]).rstrip()+'</TIME_SECS>\n')
            xmlf.write('\t\t\t\t<TEMP_DEGC>'+str(IVDICT['Temp_list'][i]).rstrip()+'</TEMP_DEGC>\n')
            xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(IVDICT['Humidity_list'][i]).rstrip()+'</HUMIDITY_PRCNT>\n')
            # xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(0.000000E+0)	+'</HUMIDITY_PRCNT>\n')

            xmlf.write('\t\t\t\t<CELL_NR>'+str(IVDICT['Cell_Number_list'][i]).rstrip()+'</CELL_NR>\n')
            xmlf.write('\t\t\t</DATA>\n')

        
        xmlf.write('\t\t</DATA_SET>\n')
        xmlf.write('</ROOT>\n')


                    

#################################################### CV TABLES ######################################################3


def make_xml_schema_HGC_CERN_SENSOR_CV(filename):

    CVDICT = dicts.get_cv_dict(filename)
    XML_tablename = 'HGC_CERN_SENSOR_CV'

    Name = 'HGC Sensor Manufacturer IV'
    Run_Name = CVDICT['Identifier'].split('_')[0]
    location=args.location
    # Kind_of_part = '200um Si Sensor SD Full'
    serial_number =CVDICT['Scratchpad_ID'] #+Run_Name#REMEMBER, SERIAL NUMBER IS SCRATCHPAD ID
    if PRESERIES:
        serial_number = serial_number +'_0'

    Kind_of_part = get_kind_of_part(serial_number, "CV")

    xml_table_file = FSUDB_OUTPUT_DIR + Run_Name + '_'+ XML_tablename + '_PRESERIES.xml'

    with open(xml_table_file, 'w+') as xmlf:
        xmlf.write('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n')
        xmlf.write('<ROOT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n')
        xmlf.write('<HEADER>\n')
        xmlf.write('\t<TYPE>\n')
        xmlf.write('\t\t<EXTENSION_TABLE_NAME>HGC_CERN_SENSOR_CV</EXTENSION_TABLE_NAME>\n')
        xmlf.write('\t\t<NAME>HGC CERN Sensor CV</NAME>\n')
        xmlf.write('\t</TYPE>\n')
        xmlf.write('\t\t<RUN>\n')
        xmlf.write('\t\t\t<RUN_NAME>' + Run_Name.rstrip() + '</RUN_NAME>\n')
        xmlf.write('\t\t\t<RUN_BEGIN_TIMESTAMP>'+convert_timestamp(CVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_BEGIN_TIMESTAMP>\n')
        xmlf.write('\t\t\t<RUN_END_TIMESTAMP>'+convert_timestamp(CVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_END_TIMESTAMP>\n')
        xmlf.write('\t\t\t<INITIATED_BY_USER>'+args.user.rstrip()+'</INITIATED_BY_USER>\n')
        xmlf.write('\t\t\t<LOCATION>'+location.rstrip()+'</LOCATION>\n')
        if args.comment:
            xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+args.comment.rstrip()+ '</COMMENT_DESCRIPTION>\n')
        else:
            xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+str(CVDICT['Comments']).replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        xmlf.write('\t\t</RUN>\n')
        xmlf.write(' </HEADER>\n')

        xmlf.write('\t\t<DATA_SET>\n')
        xmlf.write('\t\t\t<PART>\n')
        xmlf.write('\t\t\t\t<KIND_OF_PART>'+Kind_of_part.rstrip()+'</KIND_OF_PART>\n')
        xmlf.write('\t\t\t\t<SERIAL_NUMBER>'+serial_number.rstrip()+'</SERIAL_NUMBER>\n')
        xmlf.write('\t\t\t</PART>\n')


        for i in range(len(CVDICT['V_list'])):
            xmlf.write('\t\t\t<DATA>\n')
            xmlf.write('\t\t\t\t<VOLTS>'+str(CVDICT['V_list'][i]).rstrip()+'</VOLTS>\n')
            xmlf.write('\t\t\t\t<CPCTNCE_PFRD>'+str(CVDICT['Cs_list'][i]).rstrip()+'</CPCTNCE_PFRD>\n')
            xmlf.write('\t\t\t\t<ERR_CPCTNC_PFRD>'+str(CVDICT['Error_capacitance_list'][i]).rstrip()+'</ERR_CPCTNC_PFRD>\n')

            xmlf.write('\t\t\t\t<TOT_CURNT_NANOAMP>'+str(CVDICT['Tot_Current_list'][i]).rstrip()+'</TOT_CURNT_NANOAMP>\n')

            xmlf.write('\t\t\t\t<ACTUAL_VOLTS>'+str(CVDICT['Act_Volts_list'][i]).rstrip()+'</ACTUAL_VOLTS>\n')
            xmlf.write('\t\t\t\t<ORG_CPCTNC_PFRD>'+str(CVDICT['Cs_uncorr_list'][i]).rstrip()+'</ORG_CPCTNC_PFRD>\n')
            xmlf.write('\t\t\t\t<TEMP_DEGC>'+str(CVDICT['Temp_list'][i]).rstrip()+'</TEMP_DEGC>\n')
            xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(CVDICT['Humidity_list'][i]).rstrip()+'</HUMIDITY_PRCNT>\n')
        # xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(0.000000E+0)	+'<HUMIDITY_PRCNT>\n')
            xmlf.write('\t\t\t\t<IMP_OHM>'+str(CVDICT['Impedence_list'][i]).rstrip()+'</IMP_OHM>\n')
            xmlf.write('\t\t\t\t<PHS_RAD>'+str(CVDICT['Phase_list'][i]).rstrip()+'</PHS_RAD>\n')
            xmlf.write('\t\t\t\t<TIME_SECS>'+str(CVDICT['Time_list'][i]).rstrip()+'</TIME_SECS>\n')
            xmlf.write('\t\t\t\t<CELL_NR>'+str(CVDICT['Cell_Number_list'][i]).rstrip()+'</CELL_NR>\n')
            xmlf.write('\t\t\t</DATA>\n')


        
        xmlf.write('\t\t</DATA_SET>\n')
        xmlf.write('</ROOT>\n')





##################### #####################  IV SUMMARY TABLES #####################  ##################### 

def make_xml_schema_HGC_CERN_SENSOR_IV_SUMRY(filename):
    """
    This generates An output XML file, based on the HGCAL DB XML template for 
    HGC_CERN_SENSOR_IV_SUMRY from text files of sensor IV results generated by HEXDAQ
    
    Fields that this fills:
    <VOLTS> (removed)
    <TOT_CURNT_NANOAMP_600V>
    <TOT_CURNT_NANOAMP_800V>
    <NUM_BAD_CELLS>: integer 
    <PASS>: Y or N
    <GRADE> (REMOVED)
    <NUM_BAD_ADJ_CELLS>: integer
    <LIST_OF_BAD_CELLS>: comma-separated                     
    <CURNT_600V_LT_100UA>: PASS or FAIL
    <CRNTRATIO_800_TO_600V>: PASS or FAIL
    <NUM_BAD_CELLS_PASS>: PASS or FAIL  from \item Number of bad pads 0 <= 8 for full-sized sensors: textcolor{green}{Passed})
    <NUM_BAD_ADJ_CELLS_PASS>: PASS or FAIL
    Args:s
        filename (.txt file): output file of HEXDAQ results
    """
    
    IVDICT = dicts.get_iv_dict(filename)
    XML_tablename = 'HGC_CERN_SENSOR_IV_SUMRY'

    Name = 'HGC Sensor Manufacturer IV'
    Sensor_Type = IVDICT['Sensor_type']
    Run_Name = IVDICT['Identifier'].split('_')[0]
    location=args.location
    # Kind_of_part = '200um Si Sensor SD Full' #example of the accepted format

    serial_number =IVDICT['Scratchpad_ID'] #+Run_Name#REMEMBER, SERIAL NUMBER IS SCRATCHPAD ID
    if PRESERIES:
        serial_number = serial_number +'_0'

    Kind_of_part = get_kind_of_part(serial_number, "IV")
    NUM_BAD_CELLS, LIST_BAD_CELLS = get_number_bad_cells(serial_number, "IV")


    xml_table_file = FSUDB_OUTPUT_DIR + Run_Name + '_'+ XML_tablename + '_PRESERIES_TEST.xml'

    NUM_BAD_CELLS_PASS_IV, CURNT_600V_LT_100UA_IV, CRNTRATIO_800_TO_600V_IV, NUM_BAD_ADJ_CELLS_PASS_IV, PASS_IV = GET_GRADING_CRITERIA_IV(serial_number)
    with open(xml_table_file, 'w+') as xmlf:
        xmlf.write('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n')
        xmlf.write('<ROOT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n')
        xmlf.write('<HEADER>\n')
        xmlf.write('\t<TYPE>\n')
        xmlf.write('\t\t<EXTENSION_TABLE_NAME>HGC_CERN_SENSOR_IV_SUMRY</EXTENSION_TABLE_NAME>\n')
        xmlf.write('\t\t<NAME>HGC CERN Sensor IV Summary</NAME>\n')
        xmlf.write('\t</TYPE>\n')
        xmlf.write('\t\t<RUN>\n')
        xmlf.write('\t\t\t<RUN_NAME>' + Run_Name + '</RUN_NAME>\n')
        xmlf.write('\t\t\t<RUN_BEGIN_TIMESTAMP>'+convert_timestamp(IVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_BEGIN_TIMESTAMP>\n')
        xmlf.write('\t\t\t<RUN_END_TIMESTAMP>'+convert_timestamp(IVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_END_TIMESTAMP>\n')
        xmlf.write('\t\t\t<INITIATED_BY_USER>'+args.user.rstrip()+'</INITIATED_BY_USER>\n')
        xmlf.write('\t\t\t<LOCATION>'+location.rstrip()+'</LOCATION>\n')
        # if args.comment:
        #     xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+args.comment.replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        # else:
        #     xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+str(IVDICT['Comments']).replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+str(IVDICT['Comments']).replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        xmlf.write('\t\t</RUN>\n')
        xmlf.write(' </HEADER>\n')

        xmlf.write('\t\t<DATA_SET>\n')
        xmlf.write('\t\t\t<PART>\n')
        xmlf.write('\t\t\t\t<KIND_OF_PART>'+Kind_of_part.rstrip()+'</KIND_OF_PART>\n')
        xmlf.write('\t\t\t\t<SERIAL_NUMBER>'+serial_number.rstrip()+'</SERIAL_NUMBER>\n')
        xmlf.write('\t\t\t</PART>\n')


        xmlf.write('\t\t\t<DATA>\n')
        TOT_CURRENT_600, TOT_CURRENT_800 = get_TOT_CURRENT_600_800V(IVDICT)
        xmlf.write('\t\t\t\t<TOT_CURNT_NANOAMP_600V>'+str(TOT_CURRENT_600)+'</TOT_CURNT_NANOAMP_600V>\n')
        xmlf.write('\t\t\t\t<TOT_CURNT_NANOAMP_800V>'+str(TOT_CURRENT_800)+'</TOT_CURNT_NANOAMP_800V>\n')
        xmlf.write('\t\t\t\t<CURNT_600V_LT_100UA>'+str(CURNT_600V_LT_100UA_IV)+'</CURNT_600V_LT_100UA>\n')
        xmlf.write('\t\t\t\t<CRNTRATIO_800_TO_600V>'+str(CRNTRATIO_800_TO_600V_IV)+'</CRNTRATIO_800_TO_600V>\n')
        xmlf.write('\t\t\t\t<NUM_BAD_CELLS>'+ str(NUM_BAD_CELLS) + '</NUM_BAD_CELLS>\n')
        xmlf.write('\t\t\t\t<LIST_BAD_CELLS>'+ str(LIST_BAD_CELLS) + '</LIST_BAD_CELLS>\n')
        xmlf.write('\t\t\t\t<NUM_BAD_CELLS_PASS>'+str(NUM_BAD_CELLS_PASS_IV)+'</NUM_BAD_CELLS_PASS>\n')
        xmlf.write('\t\t\t\t<PASS>'+PASS_IV+'</PASS>\n')
        NUM_BAD_ADJ_CELLS_IV=str(-1)#temp
        xmlf.write('\t\t\t\t<NUM_BAD_ADJ_CELLS>'+NUM_BAD_ADJ_CELLS_IV+'</NUM_BAD_ADJ_CELLS>\n')
        xmlf.write('\t\t\t\t<NUM_BAD_ADJ_CELLS_PASS>'+NUM_BAD_ADJ_CELLS_PASS_IV+'</NUM_BAD_ADJ_CELLS_PASS>\n')
        xmlf.write('\t\t\t<DATA>\n')
        xmlf.write('\t\t</DATA_SET>\n')
        xmlf.write('</ROOT>\n')

    # #IF SAVING SUMMARY FOR EVERY CELL, UNCEOMMNET BELLOW
    # ################################################################################
    # #     for i in range(len(IVDICT['V_list'])):
    # #         xmlf.write('\t\t\t<DATA>\n')
    # #         xmlf.write('\t\t\t\t<VOLTS>'+str(IVDICT['V_list'][i]).rstrip()+'</VOLTS>\n')
    # #         #BELLOW IS CHANNEL CURRENT
    # #         xmlf.write('\t\t\t\t<CURNT_NANOAMP>'+str(IVDICT['Channel_Current_list'][i]).rstrip()+'</CURNT_NANOAMP>\n')
    # #         #BLLOW IS CHANNEL ERROR CURRENT
    # #         xmlf.write('\t\t\t\t<ERR_CURNT_NANOAMP>'+str(IVDICT['Error_Current_list'][i]).rstrip()+'</ERR_CURNT_NANOAMP>\n')
    # #         #BELLOW IS TOT CURRENT 
    # #         xmlf.write('\t\t\t\t<TOT_CURNT_NANOAMP>'+str(IVDICT['Tot_Current_list'][i]).rstrip()+'</TOT_CURNT_NANOAMP>\n')
    # #         xmlf.write('\t\t\t\t<ACTUAL_VOLTS>'+str(IVDICT['Act_Volts_list'][i]).rstrip()+'</ACTUAL_VOLTS>\n')
    # #         xmlf.write('\t\t\t\t<TIME_SECS>'+str(IVDICT['Time_list'][i]).rstrip()+'</TIME_SECS>\n')
    # #         xmlf.write('\t\t\t\t<TEMP_DEGC>'+str(IVDICT['Temp_list'][i]).rstrip()+'</TEMP_DEGC>\n')
    # #         xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(IVDICT['Humidity_list'][i]).rstrip()+'</HUMIDITY_PRCNT>\n')
    # #         # xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(0.000000E+0)	+'</HUMIDITY_PRCNT>\n')

    # #         xmlf.write('\t\t\t\t<CELL_NR>'+str(IVDICT['Cell_Number_list'][i]).rstrip()+'</CELL_NR>\n')
    # #         xmlf.write('\t\t\t</DATA>\n')
    # ################################################################################

        
    #     xmlf.write('\t\t</DATA_SET>\n')
    #     xmlf.write('</ROOT>\n')


##################### #####################  CV SUMMARY TABLES #####################  ##################### 


def make_xml_schema_HGC_CERN_SENSOR_CV_SUMRY(filename):
    """
    This generates An output XML file, based on the HGCAL DB XML template for 
    HGC_CERN_SENSOR_CV_SUMRY from text files of sensor CV results generated by HEXDAQ
    
    Fields that this fills:
    <SNSR_THCKNESS>: integer
    <DEPL_VOLTS>: integer
    in summary_hgsensor_cv "\item Full depletion voltage $V_{dep}$ = 284.0"
    <MAX_DEPL_VOLTS>: integer
    <DEPL_UNIF_VOLTS>: integer 
    <SNSR_THKNES_UNIF>: integer
    <DEPL_VOLTS_PASS>: PASSED or FAILED
    <DEPL_VOLTS_UNIF_PASS>: PASSED or FAILED
    <C_INT_PASS>: PASSED or FAILED
    <SNSR_THKNES_UNIF_PASS>: PASSED or FAILED
    <PASS>: PASSED or FAILED
    Args:s
        filename (.txt file): output file of HEXDAQ results
    """
    
    CVDICT = dicts.get_CV_dict(filename)
    XML_tablename = 'HGC_CERN_SENSOR_CV_SUMRY'

    Name = 'HGC Sensor Manufacturer CV'
    Sensor_Type = CVDICT['Sensor_type']
    Run_Name = CVDICT['Identifier'].split('_')[0]
    location=args.location
    # Kind_of_part = '200um Si Sensor SD Full' #example of the accepted format

    serial_number =CVDICT['Scratchpad_ID'] #+Run_Name#REMEMBER, SERIAL NUMBER IS SCRATCHPAD ID
    if PRESERIES:
        serial_number = serial_number +'_0'

    Kind_of_part = get_kind_of_part(serial_number, "CV")
    NUM_BAD_CELLS = get_number_bad_cells(serial_number, "CV")


    xml_table_file = FSUDB_OUTPUT_DIR + Run_Name + '_'+ XML_tablename + '_PRESERIES_TEST.xml'

    NUM_BAD_CELLS_PASS, CURNT_600V_LT_100UA, CRNTRATIO_800_TO_600V, NUM_BAD_ADJ_CELLS_PASS, PASS = GET_GRADING_CRITERIA_CV(serial_number)
    with open(xml_table_file, 'w+') as xmlf:
        xmlf.write('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n')
        xmlf.write('<ROOT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n')
        xmlf.write('<HEADER>\n')
        xmlf.write('\t<TYPE>\n')
        xmlf.write('\t\t<EXTENSION_TABLE_NAME>HGC_CERN_SENSOR_CV_SUMRY</EXTENSION_TABLE_NAME>\n')
        xmlf.write('\t\t<NAME>HGC CERN Sensor CV Summary</NAME>\n')
        xmlf.write('\t</TYPE>\n')
        xmlf.write('\t\t<RUN>\n')
        xmlf.write('\t\t\t<RUN_NAME>' + Run_Name + '</RUN_NAME>\n')
        xmlf.write('\t\t\t<RUN_BEGIN_TIMESTAMP>'+convert_timestamp(CVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_BEGIN_TIMESTAMP>\n')
        xmlf.write('\t\t\t<RUN_END_TIMESTAMP>'+convert_timestamp(CVDICT['Timestamp'].replace("\n", "").rstrip())+'</RUN_END_TIMESTAMP>\n')
        xmlf.write('\t\t\t<INITIATED_BY_USER>'+args.user.rstrip()+'</INITIATED_BY_USER>\n')
        xmlf.write('\t\t\t<LOCATION>'+location.rstrip()+'</LOCATION>\n')
        # if args.comment:
        #     xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+args.comment.replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        # else:
        #     xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+str(CVDICT['Comments']).replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        xmlf.write('\t\t\t<COMMENT_DESCRIPTION>'+str(CVDICT['Comments']).replace("\n", "").rstrip()+ '</COMMENT_DESCRIPTION>\n')
        xmlf.write('\t\t</RUN>\n')
        xmlf.write(' </HEADER>\n')

        xmlf.write('\t\t<DATA_SET>\n')
        xmlf.write('\t\t\t<PART>\n')
        xmlf.write('\t\t\t\t<KIND_OF_PART>'+Kind_of_part.rstrip()+'</KIND_OF_PART>\n')
        xmlf.write('\t\t\t\t<SERIAL_NUMBER>'+serial_number.rstrip()+'</SERIAL_NUMBER>\n')
        xmlf.write('\t\t\t</PART>\n')

        ######################################################DATA######################################################
        xmlf.write('\t\t\t<DATA>\n')
        xmlf.write('\t\t\t\t<SNSR_THCKNESS>'+SNSR_THCKNESS+'</SNSR_THCKNESS>\n')
        xmlf.write('\t\t\t\t<DEPL_VOLTS>'+DEPL_VOLTS+'</DEPL_VOLTS>\n')
        xmlf.write('\t\t\t\t<MAX_DEPL_VOLTS>'+MAX_DEPL_VOLTS+'</MAX_DEPL_VOLTS>\n')
        xmlf.write('\t\t\t\t<DEPL_UNIF_VOLTS>'+DEPL_UNIF_VOLTS+'</DEPL_UNIF_VOLTS>\n')
        xmlf.write('\t\t\t\t<SNSR_THKNES_UNIF>'+ SNSR_THKNES_UNIF + '</SNSR_THKNES_UNIF>\n')
        xmlf.write('\t\t\t\t<DEPL_VOLTS_PASS>'+DEPL_VOLTS_PASS+'</DEPL_VOLTS_PASS>\n')
        xmlf.write('\t\t\t\t<DEPL_VOLTS_UNIF_PASS>'+DEPL_VOLTS_UNIF_PASS+'</DEPL_VOLTS_UNIF_PASS>\n')
        xmlf.write('\t\t\t\t<C_INT_PASS>'+C_INT_PASS+'</C_INT_PASS>\n')
        xmlf.write('\t\t\t\t<SNSR_THKNES_UNIF_PASS>'+SNSR_THKNES_UNIF_PASS+'</SNSR_THKNES_UNIF_PASS>n')
        xmlf.write('\t\t\t\t<PASS>'+PASS+'</PASS>\n')
        xmlf.write('\t\t\t<DATA>\n')
        xmlf.write('\t\t</DATA_SET>\n')
        xmlf.write('</ROOT>\n')
        ######################################################DATA######################################################

    # #IF SAVING SUMMARY FOR EVERY CELL, UNCEOMMNET BELLOW
    # ################################################################################
    # #     for i in range(len(CVDICT['V_list'])):
    # #         xmlf.write('\t\t\t<DATA>\n')
    # #         xmlf.write('\t\t\t\t<VOLTS>'+str(CVDICT['V_list'][i]).rstrip()+'</VOLTS>\n')
    # #         #BELLOW IS CHANNEL CURRENT
    # #         xmlf.write('\t\t\t\t<CURNT_NANOAMP>'+str(CVDICT['Channel_Current_list'][i]).rstrip()+'</CURNT_NANOAMP>\n')
    # #         #BLLOW IS CHANNEL ERROR CURRENT
    # #         xmlf.write('\t\t\t\t<ERR_CURNT_NANOAMP>'+str(CVDICT['Error_Current_list'][i]).rstrip()+'</ERR_CURNT_NANOAMP>\n')
    # #         #BELLOW IS TOT CURRENT 
    # #         xmlf.write('\t\t\t\t<TOT_CURNT_NANOAMP>'+str(CVDICT['Tot_Current_list'][i]).rstrip()+'</TOT_CURNT_NANOAMP>\n')
    # #         xmlf.write('\t\t\t\t<ACTUAL_VOLTS>'+str(CVDICT['Act_Volts_list'][i]).rstrip()+'</ACTUAL_VOLTS>\n')
    # #         xmlf.write('\t\t\t\t<TIME_SECS>'+str(CVDICT['Time_list'][i]).rstrip()+'</TIME_SECS>\n')
    # #         xmlf.write('\t\t\t\t<TEMP_DEGC>'+str(CVDICT['Temp_list'][i]).rstrip()+'</TEMP_DEGC>\n')
    # #         xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(CVDICT['Humidity_list'][i]).rstrip()+'</HUMIDITY_PRCNT>\n')
    # #         # xmlf.write('\t\t\t\t<HUMIDITY_PRCNT>'+str(0.000000E+0)	+'</HUMIDITY_PRCNT>\n')

    # #         xmlf.write('\t\t\t\t<CELL_NR>'+str(CVDICT['Cell_Number_list'][i]).rstrip()+'</CELL_NR>\n')
    # #         xmlf.write('\t\t\t</DATA>\n')
    # ################################################################################

        
    #     xmlf.write('\t\t</DATA_SET>\n')
    #     xmlf.write('</ROOT>\n')

                
if __name__ == '__main__':
    # if XML_tablename=='HGC_SENSOR_IV':
    #     Sensor_type, Timestamp, Run_name, V_list, Tot_Current_list = get_V_I_lists(filename)
    #     make_xml_schema_HGC_SENSOR_IV(Sensor_type, Timestamp, Run_name, V_list, I_list)
    # elif XML_tablename=='HGC_CERN_SENSOR_IV':         
    # filename="HPK_8in_198ch_2019_N4792_18_0324iv_dict2022_FullRetest_IV.txt"
    filename=args.f

    #FOR TESTING, USE THE FILES BELOW
    # if PRESERIES:
        # filename="HPK_8in_198ch_2019_200144_20220823_test1_IV.txt"
    # else:
        # filename="HPK_8in_198ch_2019_N4792_18_03242022_FullRetest_IV.txt"
    #TEST SUMMARY IV FILE
    #python TXT_TO_XML.py --f HPK_8in_198ch_2019_200144_20220823_test1_IV.txt --t HGC_CERN_SENSOR_IV_SUMRY
    #TEST SUMMARY CV FILE
    #python TXT_TO_XML.py --f HPK_8in_198ch_2019_200118_20220707_test1_CV.txt --t HGC_CERN_SENSOR_CV_SUMRY
    if args.t == 'HGC_CERN_SENSOR_IV':
        make_xml_schema_HGC_CERN_SENSOR_IV(filename)
    elif args.t == 'HGC_CERN_SENSOR_CV':
        make_xml_schema_HGC_CERN_SENSOR_CV(filename)
    elif args.t == 'HGC_CERN_SENSOR_IV_SUMRY':
        make_xml_schema_HGC_CERN_SENSOR_IV_SUMRY(filename)
    elif args.t == 'HGC_CERN_SENSOR_CV_SUMRY':
        make_xml_schema_HGC_CERN_SENSOR_CV_SUMRY(filename)
